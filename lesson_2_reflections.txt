What happens when you initialize a repository? Why do you need to do it?

It turns your directory into a .git directory. This is how git starts tracking your files.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a set of files I have chosen to be commited. The wokring directory is ALL of my files in that current dir. The repository is the entire git repo, you may be in a dir inside the repo.

How can you use the staging area to make sure you have one commit per logical change?

You move the parts of your first commit into the staging area and send that one. Then you can move the rest and separate it for another commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

The language example was really good. An easy way to make two branches up and running with different languages. Then you can easily double up the changes. I also like the experimental feature becuase you can leave it for later and then merge it in when it's finished.

How do the diagrams help you visualize the branch structure?

It's a graphical way to show you which commits lead to the previous ones. It's a really easy way to see which ones are not reachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Combined colors AND coins :D It connects two branches back to one seemless set of code. We draw it that way to keep it organized but actually all the commits are together in a line.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git can make it easy to merge in new code without having to look at it. It doesn't effect anything and it's done automatically. Manually this way can be slow, but it's good for adding in changes made to a line by both parties.